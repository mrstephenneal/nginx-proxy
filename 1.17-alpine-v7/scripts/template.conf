# @DOMAIN (http)
server {
    listen 80;
    server_name @DOMAIN;

    # Redirect Letsencrypt challenges to validation server
    location /.well-known/acme-challenge/ {
        return 301 http://@VALIDATION_DOMAIN$request_uri;
    }

    location /legacy {
        # Proxy pass/redirection
        proxy_pass         http://@WEBSERVER:80;
        proxy_redirect     off;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;
    }

    # Redirect http requests to https
    location / {
        return 301 https://$host$request_uri;
    }
}


# @DOMAIN (https)
server {
    listen 443 ssl;
    server_name @DOMAIN;

    # SSL Certificates
    ssl_certificate /etc/letsencrypt/live/@DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/@DOMAIN/privkey.pem;

    # TLS Params
    include /etc/nginx/options-ssl-nginx.conf;
    ssl_dhparam /etc/nginx/ssl-dhparams.pem;

    # Compression config
    gzip on;
    gzip_types text/plain application/xml;
    gzip_proxied    no-cache no-store private expired auth;
    gzip_min_length 1000;
    gunzip on;


    # Letsencrypt ACME challenege redirect
    location /.well-known/acme-challenge/ {
        return 301 http://@VALIDATION_DOMAIN$request_uri;
    }

    # Caching for asset files
    location ~ (assets|css|fonts|js) {
        # Enable buffering
        proxy_buffers 16 4k;
        proxy_buffer_size 2k;

        # Zip static content
        gzip_static on;

        # Proxy cache name
        proxy_cache nginx_proxy_cache;

        # instructs NGINX to use conditional GET requests when refreshing content from the origin servers
        proxy_cache_revalidate on;

        # sets the number of times an item must be requested by clients before NGINX caches it
        proxy_cache_min_uses 1;

        # instructs NGINX to deliver stale content when clients request an item that is expired
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;

        # if multiple clients request a file that is not current in the cache (a MISS), only the first of those requests is allowed through to the origin server
        proxy_cache_lock on;

        # ignore headers preventing content from being cached
        proxy_ignore_headers Cache-Control;
        proxy_cache_valid any 5m;

        # Proxy pass/redirection
        proxy_pass         https://@WEBSERVER:443;
        proxy_redirect     off;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-Host $server_name;
    }

    location /legacy {
        return 301 http://$host$request_uri;
    }

    location / {
        # Proxy pass/redirection
        proxy_pass         https://@WEBSERVER:443;
        proxy_redirect     off;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;
    }
}